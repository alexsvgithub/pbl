import java.util.*;
import java.lang.Math;

class Pbl{
	static void addBinary(int c[],int a[],int b[],int n)
	{
		int carry=0;
		for(int i=n-1;i>=0;i--)
			{
				c[i]=a[i]+b[i]+carry;
				if(c[i]==2)
				{
					c[i]=0;
					carry=1;
				}
				else if(c[i]==3)
				{
					c[i]=1;
					carry=1;
				}
				else if(c[i]==1)
				{
					c[i]=1;
					carry=0;
				}
				else if(c[i]==0)
				{
					c[i]=0;
					carry=0;
				}
				else{
				System.out.println("Something went wrong\n");
				}
			}
			
	}
	
	static void complement(int two[],int comp[],int n)
	{
		int i,time=1;
		for(i=n-1;i>=0;i--)
		{
			
			if(comp[i]==0)
			{
				if(time==1)
				{
					two[i]=0;
				}
				else
				{
					two[i]=1;
				}
			}
			else if(comp[i]==1)
			{
				if(time==1)
				{
					two[i]=1;
					time+=1;
				}
				else if(time>=1)
				{
					two[i]=0;
				}
			}
			else
			{
				System.out.println("Something went wrong\n");
			}
		}
	}
	
	static void display(int arr[],int n)
	{
		for (int i=0;i<n;i++)
		{
			System.out.print(arr[i]);
		}
		System.out.print("\t\t");
	}
	
	static void decToBinary(int binary[],int Q,int n) 
    { 
		int[] binaryNum = new int[100];
      
        // counter for binary array 
        int i = 0; 
        while (Q > 0)  
        { 
            // storing remainder in binary array 
            binaryNum[i] = Q % 2; 
            Q = Q / 2; 
            i++; 
        } 
        
        int j = n; 
        for (i = 0; i < n; i++) { 
            binary[j - 1] = binaryNum[i]; 
            j = j - 1; 
        } 
        
    }
    
    static void leftRotatebyOne(int arr[], int n) 
    { 
        int i, temp; 
        temp = arr[0]; 
        for (i = 0; i < n - 1; i++) 
            arr[i] = arr[i + 1]; 
        arr[i] = temp; 
    } 

	static	void leftRotate(int arr[], int n) 
    { 
        for (int i = 0; i < 1; i++) 
            leftRotatebyOne(arr, n); 
    } 
  
    public static void main(String args[])
	{
		int lsd,Aint,flag=0,res=0;
		int[] Mtwo=new int[100];
		int[] comp=new int[100];
		int[] two=new int[100];
		int[] ls=new int[100];
		int[] A=new int [100];
		int[] Aaft=new int [100];
		int[] binDividend = new int[100]; 
		int[] binDivisor =new int [100];
		int[] buffer=new int[100];
		
		Scanner sc=new Scanner(System.in);
		System.out.println("Restoring Signed division algorithm\n");
		System.out.println("Enter the no of bits\n");
		int n=sc.nextInt();
		n=n+1;
		System.out.println("Enter the Dividend\n");
		int Q=sc.nextInt();
		System.out.println("Enter the Divisor\n");
		int M=sc.nextInt();
		
		////Initilizing A=0000 if +ve or A=1111 if -ve
		
		if(Q>=0)				
		{
			
			for(int i=0;i<n;i++)
				A[i]=0;
			Aint=0;
			decToBinary(binDividend,Q,n);  ///conversion of decimal to binary(dividend)
		}
		else if(Q<0)
		{
			
			for(int i=0;i<n;i++)
			{
					A[i]=1;
			}
			
			///////FOR DIVIDEND M
			Q=(Q)+Q*(-2);
			decToBinary(buffer,Q,n);  ///conversion of decimal to binary(dividend)
			complement(two,buffer,n);
			for(int i=0;i<n;i++)
			{
				binDividend[i]=two[i];
			}
				
				
		}
		else
		{
			System.out.println("Error in converting A to -ve");
		}
		
		
		////checking +ve or -ve M
		
		if(M>=0)
		{
			//decToBinary(binDividend,Q,n);  ///conversion of decimal to binary(dividend)
			decToBinary(binDivisor,M,n);   ///conversion of decimal to binary(divisor)
			
			for(int i=0;i<n;i++)
			{
				comp[i]=binDivisor[i];
			}
			
			complement(two,comp,n);	
			//display of binary
		}
		else if(M<0)
		{
			
			M=(M)+M*(-2);
				//decToBinary(binDividend,Q,n);  ///conversion of decimal to binary(dividend)
			decToBinary(two,M,n);   ///conversion of decimal to binary(divisor)
			
			for(int i=0;i<n;i++)
			{
				comp[i]=two[i];
			}
			
			complement(binDivisor,comp,n);	
			//display of binary
		}
		System.out.print(" A  :  ");
		display(A,n);System.out.print("\n");
		System.out.print(" Q  :  ");
		display(binDividend,n);System.out.print("\n");
		System.out.print(" M  :  ");
		display(binDivisor,n);System.out.print("\n");
		System.out.print("-M  :  ");
		display(two,n);System.out.print("\n");
		
		System.out.println("\nA\t\tQ\t\tM\t\tInitial Values");
		display(A,n);
		display(binDividend,n);
		display(binDivisor,n);
		System.out.println("\n");
		System.out.println("-------------------------------------------------------------------------");
	/////for loop to add for exection
	int count=n;
	while(count>0)
	{
		int bit=binDividend[0];
		leftRotate(binDividend,'1');
		leftRotate(A,'1');
		A[n-1]=bit;
		display(A,n); ////////for A
		
		
		
		if(A[0]==binDivisor[0])
		{
			flag=0;
			addBinary(Aaft,A,two,n);
		}
		else if(A[0]!=binDivisor[0])
		{
			flag=1;
			addBinary(Aaft,A,binDivisor,n);
		}
		else
		{
			System.out.println("Error while left shifting");
		}
		
		if(Aaft[0]==A[0])
		{
			res=0;
			binDividend[n-1]=1;
			for(int i=0;i<n;i++)
			{
				A[i]=Aaft[i];
			}
			display(binDividend,n);
		}
		else if(Aaft[0]!=A[0])
		{
			res=1;
			binDividend[n-1]=0;
			display(binDividend,n);
		}
		
		System.out.println("\t\tLeft Shift By one Bit");
		
		display(Aaft,n);
		if(flag==1)
			System.out.println("\t\t\t\tA=A+M");
		else
			System.out.println("\t\t\t\tA=A-M");
		
		if(res==1)
		{	display(A,n);
			System.out.println("\t\t\t\tRestoring A");
		}
		else
		{
				System.out.println("\n");
		}
		
		System.out.println("-------------------------------------------------------------------------");
		
		count--;
	}
	
	 int quotient = Q / M;
     int remainder = Q % M;
     
     System.out.print("The Quotient is    ");
     display(A,n);
     System.out.println("Which is equivalent to :"+quotient);
     
     System.out.print("The Remainder is   ");
     display(binDividend,n);
     System.out.println("Which is equivalent to :"+remainder);
     
	
}
}


